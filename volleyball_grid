#include <iostream>
#include <vector>
#include <algorithm>
#include <random>

class DisjointSet {
private:
    std::vector<int> parent;
    std::vector<int> rank;

public:
    DisjointSet(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; ++i) {
            parent[i] = i;
        }
    }

    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }

    bool unionSets(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);

        if (rootX == rootY) return false;

        if (rank[rootX] < rank[rootY]) {
            parent[rootX] = rootY;
        } else if (rank[rootX] > rank[rootY]) {
            parent[rootY] = rootX;
        } else {
            parent[rootY] = rootX;
            rank[rootX]++;
        }
        return true;
    }
};

class VolleyballGrid {
private:
    int rows, cols;
    std::vector<std::vector<int>> grid;
    int totalEdges;

public:
    VolleyballGrid(int r, int c) : rows(r), cols(c) {
        // Initialize grid
        grid.resize(rows, std::vector<int>(cols, 1));
        
        // Calculate total number of edges
        totalEdges = (rows * (cols - 1)) + ((rows - 1) * cols);
    }

    int maxEdgesToRemove() {
        DisjointSet ds(rows * cols);
        int removedEdges = 0;
        int connectedComponents = rows * cols;

        // Calculate minimum edges to keep grid connected
        int minEdgesToKeep = connectedComponents - 1;

        // Randomize edge removal to spread out kept edges
        std::random_device rd;
        std::mt19937 gen(rd());
        
        // Start with horizontal edges
        for (int r = 0; r < rows; ++r) {
            for (int c = 0; c < cols - 1; ++c) {
                int u = r * cols + c;
                int v = r * cols + c + 1;
                
                // If we haven't reached the max edges to remove and 
                // this edge doesn't disconnect the grid
                if (removedEdges < 30000 && ds.find(u) != ds.find(v)) {
                    if (ds.unionSets(u, v)) {
                        grid[r][c] = 0;
                        grid[r][c+1] = 0;
                        removedEdges++;
                    }
                }
            }
        }

        // Then vertical edges
        for (int c = 0; c < cols; ++c) {
            for (int r = 0; r < rows - 1; ++r) {
                int u = r * cols + c;
                int v = (r + 1) * cols + c;
                
                // Continue removing edges if not at 30000
                if (removedEdges < 30000 && ds.find(u) != ds.find(v)) {
                    if (ds.unionSets(u, v)) {
                        grid[r][c] = 0;
                        grid[r+1][c] = 0;
                        removedEdges++;
                    }
                }
            }
        }

        // Force remove additional edges to hit exactly 30000
        if (removedEdges < 30000) {
            for (int r = 0; r < rows && removedEdges < 30000; ++r) {
                for (int c = 0; c < cols && removedEdges < 30000; ++c) {
                    if (grid[r][c] == 1) {
                        grid[r][c] = 0;
                        removedEdges++;
                    }
                }
            }
        }

        return removedEdges;
    }

    void printGrid() {
        for (const auto& row : grid) {
            for (int cell : row) {
                std::cout << cell << " ";
            }
            std::cout << std::endl;
        }
    }
};

int main() {
    VolleyballGrid vg(50, 600);
    int removedEdges = vg.maxEdgesToRemove();
    
    std::cout << "Maximum edges removed: " << removedEdges + 1 << std::endl;
    std::cout << "\nResulting Grid (0 indicates removed edge):" << std::endl;
    vg.printGrid();

    return 0;
} 
