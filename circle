#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>

using namespace  std;


class Circle
{
public:
	Circle(double, double, double);
	Circle(double, double);
	Circle(double);
	bool setX(double);
	bool setY(double);
	bool setR(double);
	double getX();
	double getY();
	double getR();
	string info();
	~Circle();

private:
	double x, y, r;

};
double calcDistance(Circle*, Circle*);
Circle::Circle(double r)
{
	if (r < 0)r = -r;
	this->r = r;
	this->x = r;
	this->y = r;
}

Circle::Circle(double x, double y)
{
	x < 0 ? x = -x :x = x;
	y < 0 ? y = -y :y= y;
	this->x = x;
	this->y = y;
	x > y ? this->r = y : this->r = x;

}

Circle::Circle(double x, double y, double r) {
	x < 0 ? x = -x :x = x;
	y < 0 ? y = -y :y = y;
	r < 0 ? r = -r :r = r;
	if (r > x || r > y) {
		x > y ? this->r = y : this->r = x;
	}
	else {
		this->r = r;
	}

	this->x = x;
	this->y = y;
}
double Circle::getX() {
	return this->x;
}
double Circle::getY() {
	return this->y;
}
double Circle::getR() {
	return this->r;
}
bool Circle::setX(double x) {
	if (x <= 0)return false;
	if (x < this->r)return false;
	this->x = x;
	return true;
}
bool Circle::setY(double y) {
	if (y <= 0)return false;
	if (y < this->r)return false;
	this->y = y;
	return true;
}
bool Circle::setR(double r) {
	if (r <= 0)return false;
	if (r > this->y || r > this->x)return false;
	this->r = r;
	return true;
}
string Circle::info() {
	return "X = " + to_string(this->x) + ", Y = " + to_string(this->y) + ", R  = " + to_string(this->r);
}
bool belongsToCircle(Circle* circle, double x, double y) {
	double circleX = circle->getX();
	double circleY = circle->getY();
	double circleR = circle->getR();
	double dx = sqrt((circleX - x) * (circleX - x) + (circleY - y) * (circleY - y));
	if (dx > circleR)return false;
	return true;
}
int crossingNumber(Circle* c1, Circle* c2) {
	if (c1->getX() == c2->getX() && c1->getY() == c2->getY() && c1->getR() == c2->getR())return 666;
	double dx = calcDistance(c1, c2);
	if (belongsToCircle(c1, c2->getX(), c2->getY()) && c1->getR()>c2->getR()) {
		if (dx + c2->getR() < c1->getR())return 0;
		if (dx + c2->getR() > c1->getR()) return 2;
	}
	if (belongsToCircle(c2, c1->getX(), c1->getY()) && c2->getR() > c1->getR()) {
		if (dx + c1->getR() < c2->getR())return 0;
		if (dx + c1->getR() > c2->getR()) return 2;
	}

	
	if (dx == c1->getR() + c2->getR())return 1;
	if (dx > c1->getR() + c2->getR())return 0;
	if (dx < c1->getR() + c2->getR())return  2;
}
double calcLength(Circle* c1) {
	return (2 * M_PI * c1->getR());
}
double calcSurface(Circle* c1) {
	return((M_PI * c1->getR()) * (M_PI * c1->getR()));
}
double calcDistance(Circle* c1, Circle* c2) {
	return sqrt((c1->getX() - c2->getX()) * (c1->getX() - c2->getX()) + (c1->getY() - c2->getY()) * (c1->getY() - c2->getY()));
}
bool moveX(Circle* c1, double l) {
	return(c1->setX(c1->getX() + l));
}
bool moveY(Circle* c1, double l) {
	return(c1->setY(c1->getY() + l));
}
void increaseSurface(Circle* c1, int k) {
	c1->setR(sqrt(k));
}
Circle::~Circle() {
	cout << endl << "Circle deleted" << endl;
}
int main()
{
	//double x1, y1, r1;
	//cin >> x1 >> y1 >> r1;
	Circle c1(5,8 ,2 );
	Circle c2(5, 5, 1);
	increaseSurface(&c2, 9);
	cout << c2.info();
	
}

