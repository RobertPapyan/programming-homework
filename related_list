#include <stdint.h>
#include <iostream>
using namespace std;


class ListNode {
public: ListNode(const double value = 0, ListNode* next = nullptr) {
	this->_data = value;
	this->_nextPtr = next;

}
	  double _data;
	  ListNode* _nextPtr;

};

class List
{
public:
	List();
	~List();
	void insertAtFront(const double);
	void insertAtBack(const double);
	bool insertAfterIndex(const size_t, const double);
	bool removeFromFront(double&);
	bool removeFromBack(double&);
	bool isEmpty()const;
	template <class size_t>
	size_t getElementCount()const;
	void instructions();
	void printList();

private:
	ListNode* createNode(double, ListNode*) const;
	ListNode* _firstPtr;
	ListNode* _lastPtr;
	size_t _counter;
};


List::List()
{
	this->_firstPtr = nullptr;
	this->_lastPtr = nullptr;
	this->_counter = 0;
	this->instructions();
}

List::~List()
{

	this->_lastPtr = nullptr;
	while (!this->isEmpty())
	{
		ListNode* deletableNode = this->_firstPtr;
		this->_firstPtr = this->_firstPtr->_nextPtr;
		delete deletableNode;
	}

	cout << "Ended list processing" << endl;
}
ListNode* List::createNode(double value, ListNode* next = nullptr)const {

	return(new ListNode(value, next));
}

void List::insertAtFront(const double newValue) {
	ListNode* newNode = this->createNode(newValue, this->_firstPtr);
	if (!this->isEmpty()) {

		this->_firstPtr = newNode;
	}
	else {
		this->_lastPtr = newNode;
		this->_firstPtr = newNode;
	}
	this->_counter++;
}
void List::insertAtBack(const double newValue) {
	ListNode* newNode = this->createNode(newValue);
	if (!this->isEmpty()) {
		this->_lastPtr->_nextPtr = newNode;
		this->_lastPtr = newNode;
	}
	else {
		this->_firstPtr = newNode;
		this->_lastPtr = newNode;
	}
	this->_counter++;
}

bool List::insertAfterIndex(const size_t index, const double value) {
	if (index > this->_counter || index < 0) {
		return false;
	}
	else if (index == 0) {
		this->insertAtFront(value);
	}
	else if (index == this->_counter) {
		this->insertAtBack(value);
	}
	else {
		int loopIndex = 1;
		ListNode* loopNode = this->_firstPtr;
		while (loopNode->_nextPtr != this->_lastPtr->_nextPtr) {
			if (loopIndex == index) {
				loopNode->_nextPtr = this->createNode(value, loopNode->_nextPtr);
				this->_counter++;
				return true;
			}
			loopNode = loopNode->_nextPtr;
			loopIndex++;
		}
	}
	return false;
}

bool List::removeFromFront(double& value) {
	if (this->isEmpty()) {
		return false;
	}
	value = this->_firstPtr->_data;
	ListNode* removableNode = this->_firstPtr;
	this->_firstPtr = this->_firstPtr->_nextPtr;
	delete removableNode;
	this->_counter--;
	return true;
}
bool List::removeFromBack(double& value) {
	if (this->isEmpty()) {
		return false;
	}if (this->_lastPtr == this->_firstPtr) {
		value = this->_lastPtr->_data;
		delete this->_lastPtr;
		this->_lastPtr = nullptr;
		this->_firstPtr = nullptr;
		this->_counter--;
		return true;
	}
	else {
		value = this->_lastPtr->_data;
		ListNode* loopNode = this->_firstPtr;
		while (loopNode->_nextPtr != this->_lastPtr) {
			loopNode = loopNode->_nextPtr;
		}

		delete loopNode->_nextPtr;
		loopNode->_nextPtr = nullptr;
		this->_lastPtr = loopNode;
		this->_counter--;
		return true;
	}
}

template <class size_t>
size_t List::getElementCount()const {
	return(this->_counter);
}
void List::instructions() {
	int action;
	double value;
	cout << "Enter one of the following:" << endl;
	cout << "1 to insert at the begining of ilst" << endl;
	cout << "2 to insert at the end of ilst" << endl;
	cout << "3 to delete from the begining of ilst" << endl;
	cout << "4 to delete at the end of ilst" << endl;
	cout << "5 to insert after index INDEX" << endl;
	cout << "6 to show elements number" << endl;
	cout << "7 to end ilst processing" << endl;
	cin >> action;
	if (action == 1) {
		cout << "Enter value:" << endl;
		cin >> value;
		this->insertAtFront(value);

		this->printList();
	}
	else if (action == 2) {
		cout << "Enter value:" << endl;
		cin >> value;
		this->insertAtBack(value);
		this->printList();
	}
	else if (action == 3) {
		this->removeFromFront(value) ? cout << "Deleted " << value << " from list begining" << endl : cout << "Can not delete" << endl;
		this->printList();
	}
	else if (action == 4) {
		this->removeFromBack(value) ? cout << "Deleted " << value << " from list end" << endl : cout << "Can not delete" << endl;
		this->printList();
	}
	else if (action == 5) {
		cout << "Enter value:" << endl;
		cin >> value;
		size_t index;
		cout << "Enter index:" << endl;
		cin >> index;
		cout <<this->insertAfterIndex(index, value)<<endl;
		this->printList();
	}
	else if (action == 6) {this->printList();
		
		cout << "Count = " << this->getElementCount<size_t>() << endl;
	}
	else if (action == 7) {
		this->printList();
		return;
	}
	this->instructions();
}
bool List::isEmpty() const {
	return (this->_firstPtr == nullptr || this->_lastPtr == nullptr);
}
void List::printList() {
	if (this->isEmpty()) {
		cout << "List is empty" << endl;
		return;
	}
	ListNode* loopNode = this->_firstPtr;
	cout << "======================" << endl;
	while (loopNode != nullptr) {
		cout << loopNode->_data << " ---> ";
		loopNode = loopNode->_nextPtr;
	}
	cout << endl << "======================" << endl << endl;
}


int main()
{
	List list1;
}
