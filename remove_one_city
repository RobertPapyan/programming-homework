#include <iostream>
#include <vector>
#include <queue>

class Graph {
private:
    int V; 
    std::vector<std::vector<int>> adjMatrix;

public:
    Graph(int V) {
        this->V = V;
        adjMatrix.resize(V, std::vector<int>(V, 0)); 
    }

    
    void addEdge(int u, int v) {
        adjMatrix[u][v] = 1;
        adjMatrix[v][u] = 1;
    }

    
    void printAdjMatrix() {
        std::cout << "   "; 
        for (int i = 0; i < V; i++) {
            std::cout << i << " ";  
        }
        std::cout << std::endl << std::endl;

        for (int i = 0; i < V; i++) {
            std::cout << i << "  ";  
            for (int j = 0; j < V; j++) {
                std::cout << adjMatrix[i][j] << " ";  
            }
            std::cout << std::endl;
        }
    }

    
    int findLeafNode() {
        for (int i = 0; i < V; i++) {
            int degree = 0;
            for (int j = 0; j < V; j++) {
                if (adjMatrix[i][j] == 1) {
                    degree++;
                }
            }
            if (degree == 1) {
                return i; 
            }
        }
        return -1; 
    }

    
    void removeNode(int node) {
        for (int i = 0; i < V; i++) {
            adjMatrix[node][i] = 0;
            adjMatrix[i][node] = 0;
        }
    }

    
    void generateSpanningTree(int root) {
        std::vector<bool> visited(V, false);
        std::queue<int> q;
        visited[root] = true;
        q.push(root);

        while (!q.empty()) {
            int u = q.front();
            q.pop();

            for (int v = 0; v < V; v++) {
                if (!visited[v] && adjMatrix[u][v] == 1) {
                    visited[v] = true;
                    addEdge(u, v);
                    q.push(v);
                }
            }
        }
    }
};

int main() {
    int V = 6; 
    Graph g(V);

    
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);

    
    std::cout << "Adjacency Matrix before removing leaf node:" << std::endl;
    g.printAdjMatrix();

    
    int leafNode = g.findLeafNode();

    if (leafNode != -1) {
        
        g.removeNode(leafNode);

        std::cout << "\nAdjacency Matrix after removing leaf node:" << std::endl;
        g.printAdjMatrix();
    } else {
        std::cout << "\nNo leaf node found!" << std::endl;
    }

    return 0;
}
