#include <iostream>
#include <cmath>
#include <ctime>
using namespace std;
//tpel inch vor matric
void printArr(int arr[][8]) {
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 8; j++) {
			if (arr[i][j] < 10) {
				cout <<' ' << ' ' << arr[i][j];
			}
			else {
				cout <<' ' << arr[i][j];
			}
		}
		cout << endl;
	}
	cout << endl;
}
// stugel kordinaty hamapatasxanum e taxtaki sahmannerin
bool inBoard(int i, int j) {
	if (i >= 0 && i <= 7 && j >= 0 && j <= 7) {
		return true;
	}
	return false;
}
//veradarcnum e k uxxutyamb arvox qayli vandakum exac arjeqy arjeq chlinelu depqum 404
int showTurns(int i, int j, int arr[][8], int k) {
	switch(k){
	case 1: if (inBoard(i + 2, j + 1)) { return arr[i + 2][j + 1]; } break;
	case 2: if (inBoard(i + 2, j - 1)) { return arr[i + 2][j - 1]; } break;
	case 3: if (inBoard(i - 2, j + 1)) { return arr[i - 2][j + 1]; } break;
	case 4: if (inBoard(i - 2, j - 1)) { return arr[i - 2][j - 1]; } break;
	case 5: if (inBoard(i + 1, j + 2)) { return arr[i + 1][j + 2]; } break;
	case 6: if (inBoard(i + 1, j - 2)) { return arr[i + 1][j - 2]; } break;
	case 7: if (inBoard(i - 1, j + 2)) { return arr[i - 1][j + 2]; } break;
	case 8: if (inBoard(i - 1, j - 2)) { return arr[i - 1][j - 2]; } break;
	}
	return 404;
}
//kordinatnery poxum e hamapatasxan arvac qayli k uxxutyan
void makeTurn(int* i, int* j, int k) {
	switch (k) {
	case 1: if (inBoard(*i + 2, *j + 1)) { *i += 2; *j += 1; } break;
	case 2: if (inBoard(*i + 2, *j - 1)) { *i += 2; *j -= 1; } break;
	case 3: if (inBoard(*i - 2, *j + 1)) { *i -= 2; *j += 1; } break;
	case 4: if (inBoard(*i - 2, *j - 1)) { *i -= 2; *j -= 1; } break;
	case 5: if (inBoard(*i + 1, *j + 2)) { *i += 1; *j += 2; } break;
	case 6: if (inBoard(*i + 1, *j - 2)) { *i += 1; *j -= 2; } break;
	case 7: if (inBoard(*i - 1, *j + 2)) { *i -= 1; *j += 2; } break;
	case 8: if (inBoard(*i - 1, *j - 2)) { *i -= 1; *j -= 2; } break;
	}
}
//hasaneliutyan astichanneri stugum tarmacum
void accessDegre( int arr1[][8], int arr2[][8]) {
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 8; j++) {
			arr2[i][j] = 0;
		}
	}
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 8; j++) {
			for (int k = 1; k <= 8; k++) {
				//if (arr1[i][j] != 0) { arr2[i][j] = 404; break; }
				if (showTurns(i, j, arr1, k) == 0) { arr2[i][j]++; }
				
			}
		}
	}
}
void restartArrays(int arr1[][8],int arr2[][8]) {
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 8; j++) {
			arr1[i][j] = 0;
			arr2[i][j] = 0;
		}
		}

}
void start(int i, int j, int arr1[][8], int arr2 [][8]) {
	arr1[i][j] = 1;
	int x = i, y = j;
	//Pahum enq ayd qayli uxxutyan hamari tak ira hasaneliutyan astichany
	int possibleTurnsArray[9];
	accessDegre(arr1, arr2);
	printArr(arr1);
	printArr(arr2);
	
	
	for (int t = 2; t <= 64; t++) {
		printArr(arr1);
		printArr(arr2);
		for (int k = 1; k <= 8; k++) {
			possibleTurnsArray[k] = 10;
		}
		int minDegree = 600;
		//Stananq hnaravor qayleri uxxutyunneri ianc hasaneliutyan astichannerov
		for (int k = 1; k <= 8; k++) {
			possibleTurnsArray[k] = showTurns(x, y, arr2, k);
			if (showTurns(x, y, arr1, k) != 0) { possibleTurnsArray[k] = 10; }
			if (minDegree > possibleTurnsArray[k]) { minDegree = possibleTurnsArray[k]; }
		}
		cout << endl;
		for (int k = 1; k <= 8; k++) {
			cout << possibleTurnsArray[k] << " | ";
			
		}
		cout << endl << minDegree << endl;
		cout <<endl<< "===================================" << endl;
		if (minDegree == 10) {
			x = i;
			y = j;
			restartArrays(arr1, arr2);
			arr1[i][j] = 1;
			accessDegre(arr1, arr2);
			t = 1;
		}
		else {
			while (true) {
				int k = rand() % 8 + 1;
				if (possibleTurnsArray[k] == minDegree) {
					makeTurn(&x, &y, k);
					arr1[x][y] = t;
					accessDegre(arr1, arr2);
					break;
				}
			}
		
		}

	}


}





int main()
{
	int i, j, arr1[8][8], arr2[8][8];
	srand(time(NULL));
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 8; j++) {
			arr1[i][j] = 0;
			arr2[i][j] = 0;
		}
		
	}
	cout << "I = ";
	cin >> i;
	cout << endl << "J = ";
	cin >> j;
	start(i, j, arr1, arr2);
	
	cout << endl<< "Finished!" << endl;
	printArr(arr1);
	
}
